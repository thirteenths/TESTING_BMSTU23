package mock_storage

// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mock_app is a generated GoMock package.


import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/thirteenths/test-bmstu23/internal/domain"
)

// MockeventServiceStorage is a mock of eventServiceStorage interface.
type MockeventServiceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockeventServiceStorageMockRecorder
}

// MockeventServiceStorageMockRecorder is the mock recorder for MockeventServiceStorage.
type MockeventServiceStorageMockRecorder struct {
	mock *MockeventServiceStorage
}

// NewMockeventServiceStorage creates a new mock instance.
func NewMockeventServiceStorage(ctrl *gomock.Controller) *MockeventServiceStorage {
	mock := &MockeventServiceStorage{ctrl: ctrl}
	mock.recorder = &MockeventServiceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventServiceStorage) EXPECT() *MockeventServiceStorageMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockeventServiceStorage) CreateEvent(ctx context.Context, event domain.Event) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockeventServiceStorageMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockeventServiceStorage)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockeventServiceStorage) DeleteEvent(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockeventServiceStorageMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockeventServiceStorage)(nil).DeleteEvent), ctx, id)
}

// GetAllEvent mocks base method.
func (m *MockeventServiceStorage) GetAllEvent(ctx context.Context) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvent", ctx)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvent indicates an expected call of GetAllEvent.
func (mr *MockeventServiceStorageMockRecorder) GetAllEvent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvent", reflect.TypeOf((*MockeventServiceStorage)(nil).GetAllEvent), ctx)
}

// GetEvent mocks base method.
func (m *MockeventServiceStorage) GetEvent(ctx context.Context, id int) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, id)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockeventServiceStorageMockRecorder) GetEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockeventServiceStorage)(nil).GetEvent), ctx, id)
}

// GetUserEvent mocks base method.
func (m *MockeventServiceStorage) GetUserEvent(ctx context.Context, idUser int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEvent", ctx, idUser)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEvent indicates an expected call of GetUserEvent.
func (mr *MockeventServiceStorageMockRecorder) GetUserEvent(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEvent", reflect.TypeOf((*MockeventServiceStorage)(nil).GetUserEvent), ctx, idUser)
}

// UpdateEvent mocks base method.
func (m *MockeventServiceStorage) UpdateEvent(ctx context.Context, event domain.Event, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockeventServiceStorageMockRecorder) UpdateEvent(ctx, event, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockeventServiceStorage)(nil).UpdateEvent), ctx, event, id)
}
