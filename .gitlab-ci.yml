stages:
  - testing # Запуск тестов
  - history_copy # Копирование результата тестов из предыдущего запуска тестов
  - reports # Генерация отчета
  - deploy # Публикация отчета на gitlab pages

#unit-tests:
#  stage: testing
#  tags:
#    - docker
#  image: golang:1.21
#  before_script:
#    - go mod download && go mod verify
#  script:
#    - make unit-test
#  allow_failure: true # Это позволит нам продолжить выполнение пайплайна в случае, если тесты упали.
#  artifacts:
#    when: always # Сохранять всегда
#    paths:
#      - ./allure-results
#    expire_in: 1 day

#integration-tests:
#  stage: testing
#  tags:
#    - docker
#  image: golang:1.21
#  services:
#    - docker:dind
#  variables:
    # Set the Docker host to be the one of the previously created service (This forwards the user of the docker command to this service instead of running it inside the container of this build job.)
#    DOCKER_HOST: tcp://docker:2375
    # By GitLab recommended storage driver when using Docker-in-Docker (see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver)
#    DOCKER_DRIVER: overlay2
    # Disable the need for certificates when this build job communicates with the Docker service
    # If you want to secure the communication between the container of this build job and the Docker service you have to slightly change the configuration of the GitLab runner. (see https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/)
    # Since in my case everything is running on the same server I can live with this communication not being encrypted.
#    DOCKER_TLS_CERTDIR: ""
    # Use this environmental variable when connecting to the database inside the Go code
#    DATABASE_HOST: docker
#  before_script:
#    - go mod download && go mod verify
#  script:
#    - make integration-test

end-to-end-tests:
  stage: testing
  tags:
    - docker
  image: golang:1.21
  services:
   - postgres:11.7
   - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DATABASE_HOST: docker
    POSTGRES_DB: "postgres"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "7dgvJVDJvh254aqOpfd"
    POSTGRES_HOST_AUTH_METHOD: trust
    BACKEND_POSTGRES_HOST: postgres
  before_script:
    - go mod download && go mod verify
  script:
    - make run-api &
    - make e2e-test

history_job:
  stage: history_copy
  tags:
    - docker
  image: storytel/alpine-bash-curl
  script:
    - 'curl --location --output artifacts.zip "https://git.iu7.bmstu.ru/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/lab_01/download?job=pages&job_token=$CI_JOB_TOKEN"'  # С помощью api гитлаба скачиваем файлы из job, который будет указан ниже. Обратите внимание на текст на русском в ссылке. Очень важно указать вместо текста и скобок номер вашего репозиториия
    - apk add unzip # Образ, используемый в этом шаге по умолчанию не имеет утилиты unzip, по этой причине мы добавляем её в контейнер
    - unzip artifacts.zip # Распаковываем файлы
    - chmod -R 777 public # Даем права любые манипуляции с содержимым
    - cp -r ./public/history ./allure-results # Копируем историю в папку с результатами теста
  allow_failure: true # Так как при первом запуске пайплайна истории нет, это позволит нам избежать падения пайплайна. В дальнейшем эту строчку можно спокойно удалить.
  artifacts:
    paths:
      - ./allure-results # Сохраняем данные
    expire_in: 1 day
  rules:
    - when: always # Сохранять всегда

allure_job: # Название job
  stage: reports # Третий stage, который будет выполнен
  tags:
    - docker # Пользуемся тем же самым раннером
  image: frankescobar/allure-docker-service # Указываем раннеру использовать образ с allure. В нем мы будем генерировать отчет.
  script:
    - allure generate -c ./allure-results -o ./allure-report # Генерируем отчет из ./allure-results внутрь папки ./allure-report
  artifacts:
    paths:
      - ./allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./allure-report
    expire_in: 1 day
  rules:
    - when: always

pages: # Названием этой job говорим гитлабу, чтобы захостил результат у себя в pages
  stage: deploy # Четвертый stage, который будет выполнен
  script:
    - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
    - mv ./allure-report/* public # Перемещаем в папку public сгенерированный отчет.
  artifacts:
    paths:
      - public
  rules:
    - when: always